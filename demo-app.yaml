apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-app
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/name: demo-app
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-adservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: demo-app-adservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-adservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-cartservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: demo-app-cartservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-cartservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-checkoutservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: demo-app-checkoutservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-checkoutservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-currencyservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: demo-app-currencyservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-currencyservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-emailservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: demo-app-emailservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-emailservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-featureflagservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-featureflagservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: featureflagservice
    app.kubernetes.io/name: demo-app-featureflagservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 50053
      name: grpc
      targetPort: 50053
    - port: 8081
      name: http
      targetPort: 8081
  selector:
    
    opentelemetry.io/name: demo-app-featureflagservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-ffspostgres
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-ffspostgres
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: ffspostgres
    app.kubernetes.io/name: demo-app-ffspostgres
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      name: postgres
      targetPort: 5432
  selector:
    
    opentelemetry.io/name: demo-app-ffspostgres
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-frontend
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: demo-app-frontend
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-frontend
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-frontendproxy
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: demo-app-frontendproxy
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-frontendproxy
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-kafka
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: demo-app-kafka
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9092
      name: plaintext
      targetPort: 9092
    - port: 9093
      name: controller
      targetPort: 9093
  selector:
    
    opentelemetry.io/name: demo-app-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-loadgenerator
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: demo-app-loadgenerator
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8089
      name: tcp-service
      targetPort: 8089
  selector:
    
    opentelemetry.io/name: demo-app-loadgenerator
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-paymentservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: demo-app-paymentservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-paymentservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-productcatalogservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: demo-app-productcatalogservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-productcatalogservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-quoteservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: demo-app-quoteservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-quoteservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-recommendationservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: demo-app-recommendationservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-recommendationservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-redis
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-redis
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: demo-app-redis
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: redis
      targetPort: 6379
  selector:
    
    opentelemetry.io/name: demo-app-redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-app-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-shippingservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: demo-app-shippingservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: demo-app-shippingservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-accountingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-accountingservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: accountingservice
    app.kubernetes.io/name: demo-app-accountingservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-accountingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-accountingservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: accountingservice
        app.kubernetes.io/name: demo-app-accountingservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: accountingservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-accountingservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'demo-app-kafka:9092'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 demo-app-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-adservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: demo-app-adservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-adservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-adservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: adservice
        app.kubernetes.io/name: demo-app-adservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: adservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-adservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
            value: 'demo-app-featureflagservice:50053'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_LOGS_EXPORTER
            value: otlp
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 300Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-cartservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: demo-app-cartservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-cartservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-cartservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: cartservice
        app.kubernetes.io/name: demo-app-cartservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: cartservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-cartservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
            value: 'demo-app-featureflagservice:50053'
          - name: REDIS_ADDR
            value: 'demo-app-redis:6379'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 160Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 demo-app-redis 6379; do echo waiting
            for redis; sleep 2; done;
          image: busybox:latest
          name: wait-for-redis
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-checkoutservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: demo-app-checkoutservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-checkoutservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-checkoutservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/name: demo-app-checkoutservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: checkoutservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-checkoutservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: 'demo-app-cartservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'demo-app-currencyservice:8080'
          - name: EMAIL_SERVICE_ADDR
            value: http://demo-app-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: 'demo-app-paymentservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'demo-app-productcatalogservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'demo-app-shippingservice:8080'
          - name: KAFKA_SERVICE_ADDR
            value: 'demo-app-kafka:9092'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 demo-app-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-currencyservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: demo-app-currencyservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-currencyservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-currencyservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: currencyservice
        app.kubernetes.io/name: demo-app-currencyservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: currencyservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-currencyservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-emailservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: demo-app-emailservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-emailservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-emailservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: emailservice
        app.kubernetes.io/name: demo-app-emailservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: emailservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-emailservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 100Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-featureflagservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-featureflagservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: featureflagservice
    app.kubernetes.io/name: demo-app-featureflagservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-featureflagservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-featureflagservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: featureflagservice
        app.kubernetes.io/name: demo-app-featureflagservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: featureflagservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-featureflagservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 50053
            name: grpc
          - containerPort: 8081
            name: http
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FEATURE_FLAG_SERVICE_PORT
            value: "8081"
          - name: FEATURE_FLAG_GRPC_SERVICE_PORT
            value: "50053"
          - name: DATABASE_URL
            value: ecto://ffs:ffs@demo-app-ffspostgres:5432/ffs
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_EXPORTER_OTLP_TRACES_PROTOCOL
            value: grpc
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 175Mi
          livenessProbe:
            httpGet:
              path: /featureflags/
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 demo-app-ffspostgres 5432; do echo
            waiting for ffspostgres; sleep 2; done
          image: busybox:latest
          name: wait-for-ffspostgres
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-ffspostgres
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-ffspostgres
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: ffspostgres
    app.kubernetes.io/name: demo-app-ffspostgres
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-ffspostgres
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-ffspostgres
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: ffspostgres
        app.kubernetes.io/name: demo-app-ffspostgres
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: ffspostgres
          image: 'postgres:16.1'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 5432
            name: postgres
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: POSTGRES_DB
            value: ffs
          - name: POSTGRES_USER
            value: ffs
          - name: POSTGRES_PASSWORD
            value: ffs
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-frauddetectionservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-frauddetectionservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: frauddetectionservice
    app.kubernetes.io/name: demo-app-frauddetectionservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-frauddetectionservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-frauddetectionservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: frauddetectionservice
        app.kubernetes.io/name: demo-app-frauddetectionservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: frauddetectionservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-frauddetectionservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'demo-app-kafka:9092'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 200Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 demo-app-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-frontend
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: demo-app-frontend
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-frontend
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-frontend
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: frontend
        app.kubernetes.io/name: demo-app-frontend
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"        
    spec:
      serviceAccountName: demo-app
      containers:
        - name: frontend
          image: 'ghcr.io/open-telemetry/demo:1.7.0-frontend'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: 'demo-app-adservice:8080'
          - name: CART_SERVICE_ADDR
            value: 'demo-app-cartservice:8080'
          - name: CHECKOUT_SERVICE_ADDR
            value: 'demo-app-checkoutservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'demo-app-currencyservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'demo-app-productcatalogservice:8080'
          - name: RECOMMENDATION_SERVICE_ADDR
            value: 'demo-app-recommendationservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'demo-app-shippingservice:8080'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://localhost:8080/otlp-http/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 200Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-frontendproxy
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: demo-app-frontendproxy
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-frontendproxy
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-frontendproxy
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: frontendproxy
        app.kubernetes.io/name: demo-app-frontendproxy
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: frontendproxy
          image: 'ghcr.io/open-telemetry/demo:1.7.0-frontendproxy'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: ENVOY_PORT
            value: "8080"
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_HOST
            value: 'demo-app-frontend'
          - name: FEATURE_FLAG_SERVICE_PORT
            value: "8081"
          - name: FEATURE_FLAG_SERVICE_HOST
            value: 'demo-app-featureflagservice'
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_WEB_HOST
            value: 'demo-app-loadgenerator'
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: GRAFANA_SERVICE_HOST
            value: 'demo-app-grafana'
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: JAEGER_SERVICE_HOST
            value: 'demo-app-jaeger-query'
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-kafka
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: demo-app-kafka
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-kafka
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-kafka
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: kafka
        app.kubernetes.io/name: demo-app-kafka
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: kafka
          image: 'ghcr.io/open-telemetry/demo:1.7.0-kafka'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 9092
            name: plaintext
          - containerPort: 9093
            name: controller
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://demo-app-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: KAFKA_HEAP_OPTS
            value: -Xmx200M -Xms200M
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 500Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-loadgenerator
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: demo-app-loadgenerator
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-loadgenerator
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-loadgenerator
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: loadgenerator
        app.kubernetes.io/name: demo-app-loadgenerator
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: loadgenerator
          image: 'ghcr.io/open-telemetry/demo:1.7.0-loadgenerator'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8089
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://demo-app-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 120Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-paymentservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: demo-app-paymentservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-paymentservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-paymentservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: paymentservice
        app.kubernetes.io/name: demo-app-paymentservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: paymentservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-paymentservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-productcatalogservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: demo-app-productcatalogservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-productcatalogservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-productcatalogservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: productcatalogservice
        app.kubernetes.io/name: demo-app-productcatalogservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: productcatalogservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-productcatalogservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
            value: 'demo-app-featureflagservice:50053'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-quoteservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: demo-app-quoteservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-quoteservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-quoteservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: quoteservice
        app.kubernetes.io/name: demo-app-quoteservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: quoteservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-quoteservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-recommendationservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: demo-app-recommendationservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-recommendationservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-recommendationservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: recommendationservice
        app.kubernetes.io/name: demo-app-recommendationservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: recommendationservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-recommendationservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'demo-app-productcatalogservice:8080'
          - name: FEATURE_FLAG_GRPC_SERVICE_ADDR
            value: 'demo-app-featureflagservice:50053'
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 500Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-redis
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-redis
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: demo-app-redis
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-redis
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-redis
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: redis
        app.kubernetes.io/name: demo-app-redis
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: redis
          image: 'redis:7.2-alpine'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 6379
            name: redis
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.28.1
    
    opentelemetry.io/name: demo-app-shippingservice
    app.kubernetes.io/instance: demo-app
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: demo-app-shippingservice
    app.kubernetes.io/version: "1.7.0"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      opentelemetry.io/name: demo-app-shippingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: demo-app-shippingservice
        app.kubernetes.io/instance: demo-app
        app.kubernetes.io/component: shippingservice
        app.kubernetes.io/name: demo-app-shippingservice
      annotations:
        sidecar.opentelemetry.io/inject: "true"
        instrumentation.opentelemetry.io/inject-java: "demo-instrumentation"
    spec:
      serviceAccountName: demo-app
      containers:
        - name: shippingservice
          image: 'ghcr.io/open-telemetry/demo:1.7.0-shippingservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: 127.0.0.1
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://demo-app-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:

NOTES:
=======================================================================================


 ██████╗ ████████╗███████╗██╗         ██████╗ ███████╗███╗   ███╗ ██████╗
██╔═══██╗╚══██╔══╝██╔════╝██║         ██╔══██╗██╔════╝████╗ ████║██╔═══██╗
██║   ██║   ██║   █████╗  ██║         ██║  ██║█████╗  ██╔████╔██║██║   ██║
██║   ██║   ██║   ██╔══╝  ██║         ██║  ██║██╔══╝  ██║╚██╔╝██║██║   ██║
╚██████╔╝   ██║   ███████╗███████╗    ██████╔╝███████╗██║ ╚═╝ ██║╚██████╔╝
 ╚═════╝    ╚═╝   ╚══════╝╚══════╝    ╚═════╝ ╚══════╝╚═╝     ╚═╝ ╚═════╝


- All services are available via the Frontend proxy: http://localhost:8080
  by running these commands:
     kubectl --namespace default port-forward svc/demo-app-frontendproxy 8080:8080

  The following services are available at these paths once the proxy is exposed:
  Webstore             http://localhost:8080/
  Grafana              http://localhost:8080/grafana/
  Feature Flags UI     http://localhost:8080/feature/
  Load Generator UI    http://localhost:8080/loadgen/
  Jaeger UI            http://localhost:8080/jaeger/ui/
